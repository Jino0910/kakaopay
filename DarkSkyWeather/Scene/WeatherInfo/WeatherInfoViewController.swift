//
//  WeatherInfoViewController.swift
//  DarkSkyWeather
//
//  Created by rowkaxl on 10/08/2019.
//  Copyright (c) 2019 rowkaxl. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import RxCocoa
import MapKit
import RxDataSources

protocol WeatherInfoDisplayLogic: class {
    func displayDrawWeather(viewModel: WeatherInfo.Info.ViewModel)
}

class WeatherInfoViewController: UIViewController, WeatherInfoDisplayLogic {
    
    var interactor: WeatherInfoBusinessLogic?
    var router: (NSObjectProtocol & WeatherInfoRoutingLogic & WeatherInfoDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = WeatherInfoInteractor()
        let presenter = WeatherInfoPresenter()
        let router = WeatherInfoRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        configure()
        self.interactor?.doRequestDarkSkyWeather()
    }
    
    // MARK: Do something
    
    private let disposeBag = DisposeBag()
    
    public let weatherSectionModels = BehaviorRelay<[WeatherSectionModel]>(value: [])
    
    @IBOutlet weak var tv: UITableView!
    
    func displayDrawWeather(viewModel: WeatherInfo.Info.ViewModel) {
        weatherSectionModels.accept(viewModel.sectionModels)
    }
}

extension WeatherInfoViewController {
    
    private func configure() {
        configureUI()
        configureRx()
    }
    
    private func configureUI() {
        
    }
    
    private func configureRx() {
        let ds = RxTableViewSectionedReloadDataSource<WeatherSectionModel>(configureCell: {(_, tv, indexPath, item) -> UITableViewCell in
            
            switch item.type {
            case .currently:
                let cell = tv.dequeueReusableCell(withIdentifier: "WeatherCurrentlyCell", for: indexPath) as! WeatherCurrentlyCell
                if let placemark = self.router?.dataStore?.placemark, let model = item.object as? DarkSkyWeatherModel {
                    cell.configure(weatherModel: model, placemark: placemark)
                }
                return cell
            case .daily:
                let cell = tv.dequeueReusableCell(withIdentifier: "WeatherDailyCell", for: indexPath) as! WeatherDailyCell
                if let model = item.object as? WeatherData {
                    cell.configure(weatherModel: model)
                }
                return cell
            case .description:
                let cell = tv.dequeueReusableCell(withIdentifier: "WeatherDescriptionCell", for: indexPath) as! WeatherDescriptionCell
                
                if let model = item.object as? WeatherDescription {
                    cell.configure(model: model)
                }
                return cell
            }
        })
        
        weatherSectionModels.bind(to: tv.rx.items(dataSource: ds)).disposed(by: self.disposeBag)
    }
}

//
//  WeatherInteractor.swift
//  DarkSkyWeather
//
//  Created by rowkaxl on 07/08/2019.
//  Copyright (c) 2019 rowkaxl. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import RxCocoa
import MapKit

protocol WeatherBusinessLogic {
    func doDarkSkyWeather(request: Weather.Info.Request)
}

protocol WeatherDataStore {
    var currentLocation: PublishRelay<CLLocation> { get set }
}

class WeatherInteractor: WeatherBusinessLogic, WeatherDataStore {
    
    var presenter: WeatherPresentationLogic?
    var worker = WeatherWorker()
    
    let disposeBag = DisposeBag()
    var currentLocation = PublishRelay<CLLocation>()
    
    
    // MARK: Do something
    
    func doDarkSkyWeather(request: Weather.Info.Request) {
        
        
        if let apiKey = Bundle.main.infoDictionary?["DarkSkySecretKey"] as? String {
            worker.requestDarkSkyWeather(apiKey: apiKey, coordinate: request.location)
                .filter{$0.code == .code200}
                .subscribe(onSuccess: { (code, json) in
                    
                    let model = DarkSkyWeatherModel(data: json)
                    
                    print(model.currently)
                    
                    let response = Weather.Info.Response(weatherModel: model)
                    self.presenter?.presentDarkSkyWeather(response: response)
                })
                .disposed(by: disposeBag)
        
        }
    }
}



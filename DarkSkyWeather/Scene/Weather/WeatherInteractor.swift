//
//  WeatherInteractor.swift
//  DarkSkyWeather
//
//  Created by rowkaxl on 07/08/2019.
//  Copyright (c) 2019 rowkaxl. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import RxCocoa
import MapKit
import Contacts

protocol WeatherBusinessLogic {
    func doCurrentLocation()
    func doSavedPlaces()
    func doDarkSkyWeather(request: Weather.Info.Request)
    func doSavePlace(mkMapItem: MKMapItem)
    func doDeletePlace(index: Int)
}

protocol WeatherDataStore {
    var currentPlacemark: BehaviorRelay<MKPlacemark?> { get set }
    var savedPlacemarks: BehaviorRelay<[MKPlacemark]?> { get set }
    var savedPlaces: [Place]? { get set }
    var savedSelectedPlace: SelectPlace? { get set }
}

class WeatherInteractor: WeatherBusinessLogic, WeatherDataStore, PlaceProtocol, MapKitProtocol {
    
    var presenter: WeatherPresentationLogic?
    var worker = WeatherWorker()
    var currentPlacemark = BehaviorRelay<MKPlacemark?>(value: nil)
    var savedPlacemarks = BehaviorRelay<[MKPlacemark]?>(value: nil)
    var savedPlaces: [Place]? = nil
    var savedSelectedPlace: SelectPlace? = nil
    
    let disposeBag = DisposeBag()
    
    let locationManager = LocationManager()
    
    // 현재 위치정보 요청
    func doCurrentLocation() {
        locationManager.getCurrentLocation()
        locationManager.mapKitDelegate = self
    }
    
    // 저장된 장소정보
    func doSavedPlaces() {
        PlaceManager.shared.placeDelegate = self
        PlaceManager.shared.getSearchPlaces()
    }
    
    // 날씨 정보 요청
    func doDarkSkyWeather(request: Weather.Info.Request) {
    
        if let apiKey = Bundle.main.infoDictionary?["DarkSkySecretKey"] as? String {
            worker.requestDarkSkyWeather(apiKey: apiKey, coordinate: request.placeMark.coordinate)
                .filter{$0.code == .code200}
                .subscribe(onSuccess: { (code, json) in
                    
                    let model = DarkSkyWeatherModel(data: json)
                    
                    print(request.keyword)
                    print(request.placeMark.locality ?? "")
                    print(model.latitude)
                    print(model.longitude)
                    
                    let response = Weather.Info.Response(weatherModel: model, keyword: request.keyword)
                    self.presenter?.presentDarkSkyWeather(response: response)
                })
                .disposed(by: disposeBag)
        }
    }
    
    // 최근 검색정보저장
    func doSavePlace(mkMapItem: MKMapItem) {
        PlaceManager.shared.savePlace(mkMapItem: mkMapItem)
    }
    
    // 선택한 장소삭제
    func doDeletePlace(index: Int) {
        
        if let savedPlaces = self.savedPlaces {
            PlaceManager.shared.deletePlace(place: savedPlaces[index])
        }
    }
}

extension WeatherInteractor {
    
    // 현재위치 정보 결과
    func updateLocation(placemark: MKPlacemark?) {
        print("currentPlaceMark = \(placemark)")
        self.currentPlacemark.accept(placemark)
        self.doSavedPlaces()
    }
}


extension WeatherInteractor {
    
    // 저장되어 있는 장소들
    func savedPlaces(places: [Place]?) {
        print("savedPlacemarks")
        print(places)
        self.savedPlaces = places
        
        if let places = places {
            self.savedPlacemarks.accept(places.compactMap{
                MKPlacemark(coordinate: CLLocationCoordinate2D(latitude: $0.latitude,
                                                               longitude: $0.longitude),
                            addressDictionary: [CNPostalAddressCityKey:$0.locality ?? ""])})
        } else {
            self.savedPlacemarks.accept(nil)
        }
    }
    
    // 장소 저장 결과
    func savePlace(place: Place, complete: Bool) {
        if complete {
            self.doSavedPlaces()
//            PlaceManager.shared.saveSelectedPlace(place: place)
        }
    }
    
    // 장소 삭제 결과
    func deletePlace(complete: Bool) {
        if complete {
            self.doSavedPlaces()
        }
    }
    
    // 선택한 장소
    func savedSelectedPlace(place: SelectPlace?) {
        self.savedSelectedPlace = place
    }
}


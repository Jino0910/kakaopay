//
//  WeatherPresenter.swift
//  DarkSkyWeather
//
//  Created by rowkaxl on 07/08/2019.
//  Copyright (c) 2019 rowkaxl. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit

protocol WeatherPresentationLogic {
    func presentDrawDarkSkyWeathers(response: Weather.Info.Response)
    func presentAddDarkSkyWeather(response: Weather.AddPlace.Response)
}

class WeatherPresenter: WeatherPresentationLogic {
    weak var viewController: WeatherDisplayLogic?
    
    // MARK: Do something
    
    func presentDrawDarkSkyWeathers(response: Weather.Info.Response) {
        
        var weathers: [WeatherInfoViewController] = []
        
        // 현재위치
        if let placemark = response.currentPlacemark {
            weathers.append(self.getWeathersViewController(placemark: placemark))
        }
        
        // 저장된 장소
        if let placemarks = response.savedPlacemarks {
            weathers += placemarks.compactMap({ (placemarker) -> WeatherInfoViewController in
                self.getWeathersViewController(placemark: placemarker)
            })
        }
        
        let viewModel = Weather.Info.ViewModel(weathers: weathers, selectedIndex: response.selectedIndex)
        viewController?.displayDrawDarkSkyWeathers(viewModel: viewModel)
    }
    
    func presentAddDarkSkyWeather(response: Weather.AddPlace.Response) {
        
        let weather = self.getWeathersViewController(placemark: response.placemark)
        
        let viewModel = Weather.AddPlace.ViewModel(weather: weather)
        viewController?.displayAddDarkSkyWeather(viewModel: viewModel)
    }
}

extension WeatherPresenter {
    
    func getWeathersViewController(placemark: MKPlacemark) -> WeatherInfoViewController {
        
        let vc = UIStoryboard(name: "Main", bundle: Bundle.main).instantiateViewController(withIdentifier: "WeatherInfoViewController") as! WeatherInfoViewController
        var ds = vc.router!.dataStore!
        passDataToWeatherInfo(placemark: placemark, destination: &ds)
        return vc
    }
    
    func passDataToWeatherInfo(placemark: MKPlacemark, destination: inout WeatherInfoDataStore) {
        destination.placemark = placemark
    }
}

//
//  WeatherViewController.swift
//  DarkSkyWeather
//
//  Created by rowkaxl on 07/08/2019.
//  Copyright (c) 2019 rowkaxl. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import RxCocoa
import MapKit

protocol WeatherDisplayLogic: class {
    func displayDrawDarkSkyWeathers(viewModel: Weather.Info.ViewModel)
    func displayAddDarkSkyWeather(viewModel: Weather.AddPlace.ViewModel)
}

class WeatherViewController: UIViewController, WeatherDisplayLogic, MapKitProtocol {
    var interactor: WeatherBusinessLogic?
    var router: (NSObjectProtocol & WeatherRoutingLogic & WeatherDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = WeatherInteractor()
        let presenter = WeatherPresenter()
        let router = WeatherRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        configure()
        interactor?.doCurrentLocation()
    }
    
    // MARK: Do something
    
    private let disposeBag = DisposeBag()
    
    var searchController: UISearchController!
    let searchTableViewController = UIStoryboard(name: "Main", bundle: Bundle.main).instantiateViewController(withIdentifier: "LocationSearchTableViewController") as! LocationSearchTableViewController
    let pageViewController = UIStoryboard(name: "Main", bundle: Bundle.main).instantiateViewController(withIdentifier: "PageViewController") as! UIPageViewController
    var weathers: [WeatherInfoViewController] = []
    
    func displayDrawDarkSkyWeathers(viewModel: Weather.Info.ViewModel) {
        
        if let weathers = viewModel.weathers, !weathers.isEmpty {
            self.weathers = weathers
            self.setWeatherViewTag()
            
            self.pageViewController.setViewControllers([self.weathers[viewModel.selectedIndex]], direction: .forward, animated: false, completion: { (_) in
            })
        }
        
        
    }
    
    func displayAddDarkSkyWeather(viewModel: Weather.AddPlace.ViewModel) {
        
        self.weathers.append(viewModel.weather)
        self.setWeatherViewTag()

        if let weather = self.weathers.last {
            self.pageViewController.setViewControllers([weather], direction: .forward, animated: false, completion: { (_) in
            })
        }
    
    }
}

extension WeatherViewController {
    
    private func configure() {
        configureUI()
        configureRx()
    }
    
    private func configureUI() {
        
        searchController = UISearchController(searchResultsController: searchTableViewController)
        searchController.searchResultsUpdater = searchTableViewController
        searchTableViewController.mapKitDelegate = self
        
        let searchBar = searchController.searchBar
        searchBar.sizeToFit()
        searchBar.placeholder = "Search for places"
        
        navigationItem.titleView = searchController.searchBar
        searchController.hidesNavigationBarDuringPresentation = false
        searchController.dimsBackgroundDuringPresentation = true
        definesPresentationContext = true
        
    
        self.pageViewController.delegate = self
        self.pageViewController.dataSource = self
        self.addChild(self.pageViewController)
        self.view.addSubview(self.pageViewController.view)
        self.pageViewController.didMove(toParent: self)
    }
    
    private func configureRx() {
        
        router?.dataStore?.savedPlacemarks
            .skip(1)
            .take(1)
            .subscribe(onNext: { [weak self](savedPlacemarks) in
                guard let self = self else { return }
                self.interactor?.doDrawDarkSkyWeathers()
            })
            .disposed(by: disposeBag)
        
        router?.dataStore?.currentPlacemark
            .skip(1)
            .subscribe(onNext: { [weak self](currentPlacemark) in
                guard let self = self else { return }
                // 검색 테이블에 현재 위치 셋 (검색 리스트 거리별순 정렬 위해)
                if let coordinate = currentPlacemark?.coordinate {
                    self.searchTableViewController.location = CLLocation(latitude: coordinate.latitude, longitude: coordinate.longitude)
                }
            })
            .disposed(by: disposeBag)
    }
    
    private func setWeatherViewTag() {
        
        for (index, weather) in self.weathers.enumerated() {
            weather.router?.dataStore?.pageIndex = index
        }
    }
}

extension WeatherViewController {
    
    private func doDarkSkyWeather(placeMark: MKPlacemark) {
//        let request = Weather.Info.Request(placeMark: placeMark, keyword: placeMark.name ?? "")
//        self.interactor?.doDarkSkyWeather(request: request)
    }
}

extension WeatherViewController {
    
    // 검색한 정보
    func selectedPlace(mkMapItem: MKMapItem) {
        self.interactor?.doSavePlace(mkMapItem: mkMapItem)
    }
}

extension WeatherViewController: UIPageViewControllerDataSource {
    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {
        guard self.weathers.count > 0 else { return nil }
        guard let index = self.weathers.firstIndex(of: viewController as! WeatherInfoViewController) else { return nil }
//        print(index)
        guard index != 0 else { return nil }
        return self.weathers[index - 1]
    }
    
    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {
        guard self.weathers.count > 0 else { return nil }
        guard let index = self.weathers.firstIndex(of: viewController as! WeatherInfoViewController) else { return nil }
//        print(index)
        guard self.weathers.count > index + 1 else { return nil }
        return self.weathers[index + 1]
    }
}

extension WeatherViewController: UIPageViewControllerDelegate {
    
    func pageViewController(_ pageViewController: UIPageViewController, willTransitionTo pendingViewControllers: [UIViewController]) {
        
        if let viewController = pendingViewControllers[0] as? WeatherInfoViewController {
            if let index = viewController.router?.dataStore?.pageIndex {
                self.interactor?.doSaveSelectedPlace(index: index)
            }
        }
    }
    
    func pageViewController(_ pageViewController: UIPageViewController, didFinishAnimating finished: Bool, previousViewControllers: [UIViewController], transitionCompleted completed: Bool) {
//        guard completed else { return }
//        print(pageViewController.viewControllers!.first!.view.tag)
    }
}

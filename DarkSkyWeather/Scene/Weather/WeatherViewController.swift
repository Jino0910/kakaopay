//
//  WeatherViewController.swift
//  DarkSkyWeather
//
//  Created by rowkaxl on 07/08/2019.
//  Copyright (c) 2019 rowkaxl. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import RxCocoa
import MapKit

protocol WeatherDisplayLogic: class {
    func displayDarkSkyWeather(viewModel: Weather.Info.ViewModel)
}

class WeatherViewController: UIViewController, WeatherDisplayLogic, MapKitProtocol {
    var interactor: WeatherBusinessLogic?
    var router: (NSObjectProtocol & WeatherRoutingLogic & WeatherDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = WeatherInteractor()
        let presenter = WeatherPresenter()
        let router = WeatherRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        configure()
    }
    
    // MARK: Do something
    
    private let disposeBag = DisposeBag()
    
    let locationManager = LocationManager()
    var searchController: UISearchController!
    let searchTableViewController = UIStoryboard(name: "Main", bundle: Bundle.main).instantiateViewController(withIdentifier: "LocationSearchTableViewController") as! LocationSearchTableViewController
    
    
    func displayDarkSkyWeather(viewModel: Weather.Info.ViewModel) {
    
    }
}

extension WeatherViewController: UITableViewDelegate {
    
    private func configure() {
        configureUI()
        configureRx()
    }
    
    private func configureUI() {
        
        // 현재 위치정보 요청
        locationManager.getCurrentLocation()
        locationManager.mapKitDelegate = self
        
        searchController = UISearchController(searchResultsController: searchTableViewController)
        searchController.searchResultsUpdater = searchTableViewController
        searchTableViewController.mapKitDelegate = self
        
        let searchBar = searchController.searchBar
        searchBar.sizeToFit()
        searchBar.placeholder = "Search for places"
        
        navigationItem.titleView = searchController.searchBar
        searchController.hidesNavigationBarDuringPresentation = false
        searchController.dimsBackgroundDuringPresentation = true
        definesPresentationContext = true
    }
    
    private func configureRx() {
        
        router?.dataStore?.currentLocation
            .asObservable()
            .subscribe(onNext: { [weak self](location) in
                guard let self = self else { return }
                
                self.searchTableViewController.location = location
                self.doDarkSkyWeather(location: location.coordinate)
            })
            .disposed(by: disposeBag)
    }
}

extension WeatherViewController {
    
    private func doDarkSkyWeather(location: CLLocationCoordinate2D) {
        let request = Weather.Info.Request(location: location)
        self.interactor?.doDarkSkyWeather(request: request)
    }
}

extension WeatherViewController {
    
    // 현재위치 정보
    func updateLocation(location: CLLocation) {
        self.router?.dataStore?.currentLocation.accept(location)
    }
    // 검색한 정보
    func selectedLocation(placemark: MKPlacemark) {
        self.doDarkSkyWeather(location: placemark.coordinate)
    }
}
